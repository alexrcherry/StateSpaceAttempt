var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"StateSpaceAttempt1","ref":false,"files":[{"name":"StateSpaceAttempt1.c","type":"source","group":"model","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * StateSpaceAttempt1.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"StateSpaceAttempt1.h\"\r\n#include \"StateSpaceAttempt1_private.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_StateSpaceAttempt1_T StateSpaceAttempt1_B;\r\n\r\n/* Continuous states */\r\nX_StateSpaceAttempt1_T StateSpaceAttempt1_X;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_StateSpaceAttempt1_T StateSpaceAttempt1_M_;\r\nRT_MODEL_StateSpaceAttempt1_T *const StateSpaceAttempt1_M =\r\n  &StateSpaceAttempt1_M_;\r\n\r\n/*\r\n * This function updates continuous states using the ODE3 fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static const real_T rt_ODE3_A[3] = {\r\n    1.0/2.0, 3.0/4.0, 1.0\r\n  };\r\n\r\n  static const real_T rt_ODE3_B[3][3] = {\r\n    { 1.0/2.0, 0.0, 0.0 },\r\n\r\n    { 0.0, 3.0/4.0, 0.0 },\r\n\r\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\r\n  };\r\n\r\n  time_T t = rtsiGetT(si);\r\n  time_T tnew = rtsiGetSolverStopTime(si);\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x = rtsiGetContStates(si);\r\n  ODE3_IntgData *id = (ODE3_IntgData *)rtsiGetSolverData(si);\r\n  real_T *y = id->y;\r\n  real_T *f0 = id->f[0];\r\n  real_T *f1 = id->f[1];\r\n  real_T *f2 = id->f[2];\r\n  real_T hB[3];\r\n  int_T i;\r\n  int_T nXc = 6;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(y, x,\r\n                (uint_T)nXc*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  StateSpaceAttempt1_derivatives();\r\n\r\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\r\n  hB[0] = h * rt_ODE3_B[0][0];\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\r\n  rtsiSetdX(si, f1);\r\n  StateSpaceAttempt1_step();\r\n  StateSpaceAttempt1_derivatives();\r\n\r\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\r\n  for (i = 0; i <= 1; i++) {\r\n    hB[i] = h * rt_ODE3_B[1][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\r\n  rtsiSetdX(si, f2);\r\n  StateSpaceAttempt1_step();\r\n  StateSpaceAttempt1_derivatives();\r\n\r\n  /* tnew = t + hA(3);\r\n     ynew = y + f*hB(:,3); */\r\n  for (i = 0; i <= 2; i++) {\r\n    hB[i] = h * rt_ODE3_B[2][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/* Model step function */\r\nvoid StateSpaceAttempt1_step(void)\r\n{\r\n  real_T Sum_tmp;\r\n  real_T rtb_Gain6;\r\n  int32_T tmp;\r\n  if (rtmIsMajorTimeStep(StateSpaceAttempt1_M)) {\r\n    /* set solver stop time */\r\n    rtsiSetSolverStopTime(&StateSpaceAttempt1_M->solverInfo,\r\n                          ((StateSpaceAttempt1_M->Timing.clockTick0+1)*\r\n      StateSpaceAttempt1_M->Timing.stepSize0));\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(StateSpaceAttempt1_M)) {\r\n    StateSpaceAttempt1_M->Timing.t[0] = rtsiGetT\r\n      (&StateSpaceAttempt1_M->solverInfo);\r\n  }\r\n\r\n  /* Step: '<Root>/Step' incorporates:\r\n   *  Step: '<Root>/Step1'\r\n   *  Step: '<Root>/Step2'\r\n   */\r\n  Sum_tmp = StateSpaceAttempt1_M->Timing.t[0];\r\n\r\n  /* Sum: '<Root>/Sum' incorporates:\r\n   *  Gain: '<Root>/Gain1'\r\n   *  Integrator: '<Root>/Integrator'\r\n   *  Step: '<Root>/Step'\r\n   */\r\n  StateSpaceAttempt1_B.Sum[0] = (0.0 * StateSpaceAttempt1_X.Integrator_CSTATE[1]\r\n    + StateSpaceAttempt1_X.Integrator_CSTATE[0]) + (real_T)!(Sum_tmp < 0.0);\r\n  StateSpaceAttempt1_B.Sum[1] = 2.0 * StateSpaceAttempt1_X.Integrator_CSTATE[0]\r\n    + 0.0 * StateSpaceAttempt1_X.Integrator_CSTATE[1];\r\n\r\n  /* Step: '<Root>/Step2' */\r\n  if (Sum_tmp < 0.0) {\r\n    tmp = 0;\r\n  } else {\r\n    tmp = 2;\r\n  }\r\n\r\n  /* Sum: '<Root>/Sum4' incorporates:\r\n   *  Gain: '<Root>/Gain10'\r\n   *  Gain: '<Root>/Gain11'\r\n   *  Integrator: '<Root>/Integrator2'\r\n   */\r\n  rtb_Gain6 = 31.622776601683842 * (real_T)tmp - (12.291195968839395 *\r\n    StateSpaceAttempt1_X.Integrator2_CSTATE[0] + 31.622776601683842 *\r\n    StateSpaceAttempt1_X.Integrator2_CSTATE[1]);\r\n\r\n  /* Sum: '<Root>/Sum3' incorporates:\r\n   *  Gain: '<Root>/Gain7'\r\n   *  Gain: '<Root>/Gain8'\r\n   *  Integrator: '<Root>/Integrator2'\r\n   */\r\n  StateSpaceAttempt1_B.Sum3[0] = (0.0 * StateSpaceAttempt1_X.Integrator2_CSTATE\r\n    [1] + StateSpaceAttempt1_X.Integrator2_CSTATE[0]) + rtb_Gain6;\r\n  StateSpaceAttempt1_B.Sum3[1] = (2.0 * StateSpaceAttempt1_X.Integrator2_CSTATE\r\n    [0] + 0.0 * StateSpaceAttempt1_X.Integrator2_CSTATE[1]) + 0.0 * rtb_Gain6;\r\n\r\n  /* Sum: '<Root>/Sum2' incorporates:\r\n   *  Gain: '<Root>/Gain6'\r\n   *  Integrator: '<Root>/Integrator1'\r\n   *  Step: '<Root>/Step1'\r\n   */\r\n  rtb_Gain6 = (real_T)!(Sum_tmp < 0.0) - (12.291195968839395 *\r\n    StateSpaceAttempt1_X.Integrator1_CSTATE[0] + 31.622776601683842 *\r\n    StateSpaceAttempt1_X.Integrator1_CSTATE[1]);\r\n\r\n  /* Sum: '<Root>/Sum1' incorporates:\r\n   *  Gain: '<Root>/Gain3'\r\n   *  Gain: '<Root>/Gain4'\r\n   *  Integrator: '<Root>/Integrator1'\r\n   */\r\n  StateSpaceAttempt1_B.Sum1[0] = (0.0 * StateSpaceAttempt1_X.Integrator1_CSTATE\r\n    [1] + StateSpaceAttempt1_X.Integrator1_CSTATE[0]) + rtb_Gain6;\r\n  StateSpaceAttempt1_B.Sum1[1] = (2.0 * StateSpaceAttempt1_X.Integrator1_CSTATE\r\n    [0] + 0.0 * StateSpaceAttempt1_X.Integrator1_CSTATE[1]) + 0.0 * rtb_Gain6;\r\n  if (rtmIsMajorTimeStep(StateSpaceAttempt1_M)) {\r\n    rt_ertODEUpdateContinuousStates(&StateSpaceAttempt1_M->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     */\r\n    ++StateSpaceAttempt1_M->Timing.clockTick0;\r\n    StateSpaceAttempt1_M->Timing.t[0] = rtsiGetSolverStopTime\r\n      (&StateSpaceAttempt1_M->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [0.04s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 0.04, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       */\r\n      StateSpaceAttempt1_M->Timing.clockTick1++;\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid StateSpaceAttempt1_derivatives(void)\r\n{\r\n  XDot_StateSpaceAttempt1_T *_rtXdot;\r\n  _rtXdot = ((XDot_StateSpaceAttempt1_T *) StateSpaceAttempt1_M->derivs);\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE[0] = StateSpaceAttempt1_B.Sum[0];\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator2' */\r\n  _rtXdot->Integrator2_CSTATE[0] = StateSpaceAttempt1_B.Sum3[0];\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator1' */\r\n  _rtXdot->Integrator1_CSTATE[0] = StateSpaceAttempt1_B.Sum1[0];\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE[1] = StateSpaceAttempt1_B.Sum[1];\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator2' */\r\n  _rtXdot->Integrator2_CSTATE[1] = StateSpaceAttempt1_B.Sum3[1];\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator1' */\r\n  _rtXdot->Integrator1_CSTATE[1] = StateSpaceAttempt1_B.Sum1[1];\r\n}\r\n\r\n/* Model initialize function */\r\nvoid StateSpaceAttempt1_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)StateSpaceAttempt1_M, 0,\r\n                sizeof(RT_MODEL_StateSpaceAttempt1_T));\r\n\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&StateSpaceAttempt1_M->solverInfo,\r\n                          &StateSpaceAttempt1_M->Timing.simTimeStep);\r\n    rtsiSetTPtr(&StateSpaceAttempt1_M->solverInfo, &rtmGetTPtr\r\n                (StateSpaceAttempt1_M));\r\n    rtsiSetStepSizePtr(&StateSpaceAttempt1_M->solverInfo,\r\n                       &StateSpaceAttempt1_M->Timing.stepSize0);\r\n    rtsiSetdXPtr(&StateSpaceAttempt1_M->solverInfo,\r\n                 &StateSpaceAttempt1_M->derivs);\r\n    rtsiSetContStatesPtr(&StateSpaceAttempt1_M->solverInfo, (real_T **)\r\n                         &StateSpaceAttempt1_M->contStates);\r\n    rtsiSetNumContStatesPtr(&StateSpaceAttempt1_M->solverInfo,\r\n      &StateSpaceAttempt1_M->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&StateSpaceAttempt1_M->solverInfo,\r\n      &StateSpaceAttempt1_M->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&StateSpaceAttempt1_M->solverInfo,\r\n      &StateSpaceAttempt1_M->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&StateSpaceAttempt1_M->solverInfo,\r\n      &StateSpaceAttempt1_M->periodicContStateRanges);\r\n    rtsiSetErrorStatusPtr(&StateSpaceAttempt1_M->solverInfo, (&rtmGetErrorStatus\r\n      (StateSpaceAttempt1_M)));\r\n    rtsiSetRTModelPtr(&StateSpaceAttempt1_M->solverInfo, StateSpaceAttempt1_M);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&StateSpaceAttempt1_M->solverInfo, MAJOR_TIME_STEP);\r\n  StateSpaceAttempt1_M->intgData.y = StateSpaceAttempt1_M->odeY;\r\n  StateSpaceAttempt1_M->intgData.f[0] = StateSpaceAttempt1_M->odeF[0];\r\n  StateSpaceAttempt1_M->intgData.f[1] = StateSpaceAttempt1_M->odeF[1];\r\n  StateSpaceAttempt1_M->intgData.f[2] = StateSpaceAttempt1_M->odeF[2];\r\n  StateSpaceAttempt1_M->contStates = ((X_StateSpaceAttempt1_T *)\r\n    &StateSpaceAttempt1_X);\r\n  rtsiSetSolverData(&StateSpaceAttempt1_M->solverInfo, (void *)\r\n                    &StateSpaceAttempt1_M->intgData);\r\n  rtsiSetSolverName(&StateSpaceAttempt1_M->solverInfo,\"ode3\");\r\n  rtmSetTPtr(StateSpaceAttempt1_M, &StateSpaceAttempt1_M->Timing.tArray[0]);\r\n  StateSpaceAttempt1_M->Timing.stepSize0 = 0.04;\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &StateSpaceAttempt1_B), 0,\r\n                sizeof(B_StateSpaceAttempt1_T));\r\n\r\n  /* states (continuous) */\r\n  {\r\n    (void) memset((void *)&StateSpaceAttempt1_X, 0,\r\n                  sizeof(X_StateSpaceAttempt1_T));\r\n  }\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator' */\r\n  StateSpaceAttempt1_X.Integrator_CSTATE[0] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator2' */\r\n  StateSpaceAttempt1_X.Integrator2_CSTATE[0] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator1' */\r\n  StateSpaceAttempt1_X.Integrator1_CSTATE[0] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator' */\r\n  StateSpaceAttempt1_X.Integrator_CSTATE[1] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator2' */\r\n  StateSpaceAttempt1_X.Integrator2_CSTATE[1] = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator1' */\r\n  StateSpaceAttempt1_X.Integrator1_CSTATE[1] = 0.0;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid StateSpaceAttempt1_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n"},{"name":"StateSpaceAttempt1.h","type":"header","group":"model","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * StateSpaceAttempt1.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StateSpaceAttempt1_h_\r\n#define RTW_HEADER_StateSpaceAttempt1_h_\r\n#include <string.h>\r\n#ifndef StateSpaceAttempt1_COMMON_INCLUDES_\r\n#define StateSpaceAttempt1_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* StateSpaceAttempt1_COMMON_INCLUDES_ */\r\n\r\n#include \"StateSpaceAttempt1_types.h\"\r\n\r\n/* Shared type includes */\r\n#include \"multiword_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetContStateDisabled\r\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\r\n#endif\r\n\r\n#ifndef rtmSetContStateDisabled\r\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContStates\r\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\r\n#endif\r\n\r\n#ifndef rtmSetContStates\r\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\r\n#endif\r\n\r\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\r\n#endif\r\n\r\n#ifndef rtmGetDerivCacheNeedsReset\r\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetDerivCacheNeedsReset\r\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetIntgData\r\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\r\n#endif\r\n\r\n#ifndef rtmSetIntgData\r\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF\r\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF\r\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeY\r\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\r\n#endif\r\n\r\n#ifndef rtmSetOdeY\r\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateIndices\r\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateIndices\r\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateRanges\r\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateRanges\r\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\r\n#endif\r\n\r\n#ifndef rtmGetZCCacheNeedsReset\r\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetZCCacheNeedsReset\r\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetdX\r\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\r\n#endif\r\n\r\n#ifndef rtmSetdX\r\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T Sum[2];                       /* '<Root>/Sum' */\r\n  real_T Sum3[2];                      /* '<Root>/Sum3' */\r\n  real_T Sum1[2];                      /* '<Root>/Sum1' */\r\n} B_StateSpaceAttempt1_T;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE[2];         /* '<Root>/Integrator' */\r\n  real_T Integrator2_CSTATE[2];        /* '<Root>/Integrator2' */\r\n  real_T Integrator1_CSTATE[2];        /* '<Root>/Integrator1' */\r\n} X_StateSpaceAttempt1_T;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE[2];         /* '<Root>/Integrator' */\r\n  real_T Integrator2_CSTATE[2];        /* '<Root>/Integrator2' */\r\n  real_T Integrator1_CSTATE[2];        /* '<Root>/Integrator1' */\r\n} XDot_StateSpaceAttempt1_T;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T Integrator_CSTATE[2];      /* '<Root>/Integrator' */\r\n  boolean_T Integrator2_CSTATE[2];     /* '<Root>/Integrator2' */\r\n  boolean_T Integrator1_CSTATE[2];     /* '<Root>/Integrator1' */\r\n} XDis_StateSpaceAttempt1_T;\r\n\r\n#ifndef ODE3_INTG\r\n#define ODE3_INTG\r\n\r\n/* ODE3 Integration Data */\r\ntypedef struct {\r\n  real_T *y;                           /* output */\r\n  real_T *f[3];                        /* derivatives */\r\n} ODE3_IntgData;\r\n\r\n#endif\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_StateSpaceAttempt1_T {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X_StateSpaceAttempt1_T *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  boolean_T *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[6];\r\n  real_T odeF[3][6];\r\n  ODE3_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_StateSpaceAttempt1_T StateSpaceAttempt1_B;\r\n\r\n/* Continuous states (default storage) */\r\nextern X_StateSpaceAttempt1_T StateSpaceAttempt1_X;\r\n\r\n/* Model entry point functions */\r\nextern void StateSpaceAttempt1_initialize(void);\r\nextern void StateSpaceAttempt1_step(void);\r\nextern void StateSpaceAttempt1_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_StateSpaceAttempt1_T *const StateSpaceAttempt1_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Gain2' : Unused code path elimination\r\n * Block '<Root>/Gain5' : Unused code path elimination\r\n * Block '<Root>/Gain9' : Unused code path elimination\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n * Block '<Root>/Scope1' : Unused code path elimination\r\n * Block '<Root>/Scope2' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'StateSpaceAttempt1'\r\n */\r\n#endif                                 /* RTW_HEADER_StateSpaceAttempt1_h_ */\r\n"},{"name":"StateSpaceAttempt1_private.h","type":"header","group":"model","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * StateSpaceAttempt1_private.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StateSpaceAttempt1_private_h_\r\n#define RTW_HEADER_StateSpaceAttempt1_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"multiword_types.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* private model entry point functions */\r\nextern void StateSpaceAttempt1_derivatives(void);\r\n\r\n#endif                            /* RTW_HEADER_StateSpaceAttempt1_private_h_ */\r\n"},{"name":"StateSpaceAttempt1_types.h","type":"header","group":"model","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * StateSpaceAttempt1_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_StateSpaceAttempt1_types_h_\r\n#define RTW_HEADER_StateSpaceAttempt1_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_StateSpaceAttempt1_T RT_MODEL_StateSpaceAttempt1_T;\r\n\r\n#endif                              /* RTW_HEADER_StateSpaceAttempt1_types_h_ */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long long longlong_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n#ifndef INT64_T\r\n#define INT64_T\r\n\r\ntypedef long long int64_T;\r\n\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#endif\r\n\r\n#ifndef UINT64_T\r\n#define UINT64_T\r\n\r\ntypedef unsigned long long uint64_T;\r\n\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n#endif\r\n\r\n/*===========================================================================*\r\n * Additional complex number type definitions                                           *\r\n *===========================================================================*/\r\n#ifndef CINT64_T\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#endif\r\n\r\n#ifndef CUINT64_T\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\alexr\\OneDrive\\Documents\\MATLAB\\StateSpaceAttempt1_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"StateSpaceAttempt1\".\r\n *\r\n * Model version              : 1.2\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Thu Oct 13 13:35:26 2022\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n\r\n/*\r\n *  Includes the appropriate headers when we are using rtModel\r\n */\r\n#include \"StateSpaceAttempt1.h\"\r\n#define GRTINTERFACE                   0\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n"}]};